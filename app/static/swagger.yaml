openapi: 3.0.3
info:
  title: Fitness Tracker API
  description: The complete API reference for the Fitness Tracker B2B platform.
  version: 1.0.0
servers:
  - url: /api
    description: API server
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Membership:
      type: object
      properties:
        plan:
          type: string
          example: "Premium"
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "priya.sharma@example.com"
        password:
          type: string
          format: password
          example: "strongpassword123"
    UserRegistration:
      type: object
      required:
        - name
        - age
        - gender
        - email
        - password
        - weight_kg
        - height_cm
        - fitness_goals
        - workouts_per_week
        - workout_duration
        - sleep_hours
        - stress_level
      properties:
        name:
          type: string
          example: "Priya Sharma"
        age:
          type: integer
          example: 29
        gender:
          type: string
          enum: [Male, Female, Other]
        email:
          type: string
          format: email
          example: "priya.sharma@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "strongpassword123"
        phone_number:
          type: string
          example: "+919876543210"
        weight_kg:
          type: number
          example: 62.5
        height_cm:
          type: number
          example: 160
        fitness_goals:
          type: string
          example: "Fat loss and Toning"
        workouts_per_week:
          type: string
          example: "3-4"
        workout_duration:
          type: integer
          example: 45
        sleep_hours:
          type: string
          example: "7"
        stress_level:
          type: string
          enum: [low, medium, high]
        membership:
          $ref: '#/components/schemas/Membership'
        disliked_foods:
          type: string
          example: "Okra"
        allergies:
          type: string
          example: "None"
        health_conditions:
          type: string
          example: "None"
    # --- ADDED THIS SCHEMA DEFINITION ---
    UserProfileUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Priya Sharma"
        age:
          type: integer
          example: 30
        gender:
          type: string
          enum: [Male, Female, Other]
        email:
          type: string
          format: email
          example: "priya.sharma@example.com"
        phone_number:
          type: string
          example: "+919876543210"
        weight_kg:
          type: number
          example: 61.5
        height_cm:
          type: number
          example: 160
        fitness_goals:
          type: string
          example: "Maintain weight and build strength"
        workouts_per_week:
          type: string
          example: "4-5"
        workout_duration:
          type: integer
          example: 60
        sleep_hours:
          type: string
          example: "8"
        stress_level:
          type: string
          enum: [low, medium, high]
        disliked_foods:
          type: string
          example: "Okra, Mushrooms"
        allergies:
          type: string
          example: "None"
        health_conditions:
          type: string
          example: "None"
    Macros:
      type: object
      properties:
        protein_g:
          type: number
        carbs_g:
          type: number
        fat_g:
          type: number
    DietLog:
      type: object
      required:
        - meal_name
        - calories
      properties:
        meal_name:
          type: string
        calories:
          type: integer
        food_items:
          type: string
        macros:
          $ref: '#/components/schemas/Macros'
        date:
          type: string
          format: date-time
    GenerateDietPlan:
      type: object
      required:
        - activityLevel
        - diet_type
      properties:
        activityLevel:
          type: string
          enum: [sedentary, lightlyActive, moderatelyActive, veryActive, extraActive]
        diet_type:
          type: string
          enum: [veg, non-veg]
        budget:
          type: string
        optional_cuisines:
          type: array
          items:
            type: string
    Exercise:
      type: object
      required:
        - name
        - sets
        - reps
        - weight
      properties:
        name:
          type: string
        sets:
          type: integer
        reps:
          type: integer
        weight:
          type: number
    WorkoutLog:
      type: object
      required:
        - name
        - exercises
      properties:
        name:
          type: string
        date:
          type: string
          format: date-time
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
    GenerateWorkoutPlan:
      type: object
      required:
        - fitnessLevel
        - equipment
      properties:
        fitnessLevel:
          type: string
          enum: [beginner, intermediate, advanced]
        equipment:
          type: string
          enum: [bodyweight only, Home gym, Gym access]
    WeightLog:
      type: object
      required:
        - weight_kg
      properties:
        weight_kg:
          type: number
        date:
          type: string
          format: date-time
    MeasurementLog:
      type: object
      properties:
        date:
          type: string
          format: date-time
        waist_cm:
          type: number
        chest_cm:
          type: number
        arms_cm:
          type: number
        hips_cm:
          type: number
paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
        '409':
          description: User already exists
  /auth/login:
    post:
      tags: [Authentication]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful, returns access and refresh tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: jwt
                    description: Short-lived token for API access.
                  refresh_token:
                    type: string
                    format: jwt
                    description: Long-lived token to get a new access token.
        '401':
          description: Invalid email or password
  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      description: Exchanges a valid refresh token for a new access token. The refresh token must be sent in the Authorization header.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: New access token generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    format: jwt
        '401':
          description: Authentication error (e.g., refresh token is missing, invalid, or expired)
  /auth/logout:
    post:
      tags: [Authentication]
      summary: Log out a user
      description: Invalidates the user's current access token and deletes their refresh token for a complete logout.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Authentication error (e.g., token is missing, invalid, or expired)
  /user/profile/me:
    get:
      tags: [User]
      summary: Get my profile
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: The current user's profile data.
        '401':
          description: Authentication error (missing token, expired, etc.)
    # --- ADDED THIS ENTIRE 'put' SECTION ---
    put:
      tags: [User]
      summary: Update my profile
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid input
        '401':
          description: Authentication error
  /diet/generate-plan:
    post:
      tags: [Diet]
      summary: Generate a new diet plan for myself
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateDietPlan'
      responses:
        '200':
          description: Diet plan generated successfully
        '400':
          description: Invalid input
  /diet/log:
    post:
      tags: [Diet]
      summary: Log a meal for myself
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DietLog'
      responses:
        '201':
          description: Meal logged successfully
        '400':
          description: Invalid input
  /diet/logs/me:
    get:
      tags: [Diet]
      summary: Get my diet history
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: A list of my diet logs
        '401':
          description: Authentication error
  /diet/weekly-summary/me:
    get:
      tags: [Diet]
      summary: Get my weekly diet summary
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: My weekly diet summary
        '401':
          description: Authentication error
  /diet/plan/latest/me:
    get:
      tags: [Diet]
      summary: Get my latest diet plan
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: My latest diet plan
        '401':
          description: Authentication error
        '404':
          description: No diet plan found for me
  /workout/generate-plan:
    post:
      tags: [Workout]
      summary: Generate a new workout plan for myself
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateWorkoutPlan'
      responses:
        '200':
          description: Workout plan generated successfully
        '400':
          description: Invalid input
  /workout/log:
    post:
      tags: [Workout]
      summary: Log a workout for myself
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutLog'
      responses:
        '201':
          description: Workout logged successfully
        '400':
          description: Invalid input
  /workout/history/me:
    get:
      tags: [Workout]
      summary: Get my workout history
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: A list of my workout logs
        '401':
          description: Authentication error
  /workout/plan/latest/me:
    get:
      tags: [Workout]
      summary: Get my latest workout plan
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: My latest workout plan
        '401':
          description: Authentication error
        '404':
          description: No workout plan found for me
  /progress/weekly-report/me:
    get:
      tags: [Progress]
      summary: Get my weekly report
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: My weekly performance report
        '401':
          description: Authentication error
  /progress/weight/log:
    post:
      tags: [Progress]
      summary: Log my weight
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightLog'
      responses:
        '201':
          description: Weight logged successfully
        '400':
          description: Invalid input
  /progress/measurements/log:
    post:
      tags: [Progress]
      summary: Log my physical measurements
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementLog'
      responses:
        '201':
          description: Measurements logged successfully
        '400':
          description: Invalid input
  /progress/weight/me:
    get:
      tags: [Progress]
      summary: Get my weight history
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: A list of my weight entries
        '401':
          description: Authentication error
  /reward/status/me:
    get:
      tags: [Rewards]
      summary: Get my reward status and achievements
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: A list of my new and all achievements
        '401':
          description: Authentication error