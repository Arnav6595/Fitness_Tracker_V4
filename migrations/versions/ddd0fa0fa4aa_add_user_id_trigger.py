
"""Add user id trigger

Revision ID: ddd0fa0fa4aa
Revises: ce1c7dcea07e
Create Date: 2025-07-27 18:05:28.626927

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ddd0fa0fa4aa'
down_revision = 'ce1c7dcea07e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Conditionally create the 'clients' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'clients'
            ) THEN
                CREATE TABLE neondb.clients (
                    id SERIAL NOT NULL,
                    company_name VARCHAR(100) NOT NULL,
                    api_key VARCHAR(128) NOT NULL,
                    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT now(),
                    PRIMARY KEY (id),
                    UNIQUE (company_name)
                );
            END IF;
        END $$;
    """)
    # Conditionally create the unique index on 'api_key' if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_indexes 
                WHERE schemaname = 'neondb' AND indexname = 'ix_neondb_clients_api_key'
            ) THEN
                CREATE UNIQUE INDEX ix_neondb_clients_api_key ON neondb.clients (api_key);
            END IF;
        END $$;
    """)

    # Conditionally create the 'user' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'user'
            ) THEN
                CREATE TABLE neondb.user (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    username VARCHAR(80) NOT NULL,
                    contact_info VARCHAR(120) NOT NULL,
                    name VARCHAR(120) NOT NULL,
                    age INTEGER,
                    gender VARCHAR(20),
                    weight_kg FLOAT,
                    height_cm FLOAT,
                    fitness_goals TEXT,
                    workouts_per_week VARCHAR(10),
                    workout_duration INTEGER,
                    disliked_foods TEXT,
                    allergies TEXT,
                    health_conditions TEXT,
                    sleep_hours VARCHAR(10),
                    stress_level VARCHAR(20),
                    activity_level VARCHAR(50),
                    PRIMARY KEY (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id),
                    CONSTRAINT _contact_info_client_uc UNIQUE (contact_info, client_id),
                    CONSTRAINT _username_client_uc UNIQUE (username, client_id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'achievement' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'achievement'
            ) THEN
                CREATE TABLE neondb.achievement (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    name VARCHAR(200) NOT NULL,
                    description TEXT,
                    unlocked_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'diet_log' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'diet_log'
            ) THEN
                CREATE TABLE neondb.diet_log (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    meal_name VARCHAR(100) NOT NULL,
                    food_items TEXT,
                    calories INTEGER,
                    protein_g FLOAT,
                    carbs_g FLOAT,
                    fat_g FLOAT,
                    date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'measurement_log' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'measurement_log'
            ) THEN
                CREATE TABLE neondb.measurement_log (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    waist_cm FLOAT,
                    chest_cm FLOAT,
                    arms_cm FLOAT,
                    hips_cm FLOAT,
                    date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'membership' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'membership'
            ) THEN
                CREATE TABLE neondb.membership (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    start_date DATE,
                    end_date DATE,
                    plan VARCHAR(50),
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'weight_entry' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'weight_entry'
            ) THEN
                CREATE TABLE neondb.weight_entry (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    weight_kg FLOAT NOT NULL,
                    date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'workout_log' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'workout_log'
            ) THEN
                CREATE TABLE neondb.workout_log (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    name VARCHAR(150) NOT NULL,
                    date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'workout_plan' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'workout_plan'
            ) THEN
                CREATE TABLE neondb.workout_plan (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    generated_plan JSON,
                    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id, user_id) REFERENCES neondb.user (client_id, id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id)
                );
            END IF;
        END $$;
    """)

    # Conditionally create the 'exercise_entry' table if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'exercise_entry'
            ) THEN
                CREATE TABLE neondb.exercise_entry (
                    id INTEGER NOT NULL,
                    client_id INTEGER NOT NULL,
                    name VARCHAR(150) NOT NULL,
                    sets INTEGER NOT NULL,
                    reps INTEGER NOT NULL,
                    weight FLOAT NOT NULL,
                    workout_log_id INTEGER NOT NULL,
                    PRIMARY KEY (id),
                    FOREIGN KEY (client_id) REFERENCES neondb.clients (id),
                    FOREIGN KEY (workout_log_id) REFERENCES neondb.workout_log (id)
                );
            END IF;
        END $$;
    """)

    # ### end Alembic commands ###

    # --- ADD THE TRIGGER LOGIC BELOW ---
    trigger_function = """
    CREATE OR REPLACE FUNCTION neondb.set_user_id()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.id = (SELECT COALESCE(MAX(id), 0) + 1 FROM neondb.user WHERE client_id = NEW.client_id);
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """
    op.execute(trigger_function)

    trigger = """
    CREATE TRIGGER set_user_id_trigger
    BEFORE INSERT ON neondb.user
    FOR EACH ROW
    EXECUTE FUNCTION neondb.set_user_id();
    """
    op.execute(trigger)


def downgrade():
    # --- ADD THE TRIGGER DROP LOGIC BELOW ---
    op.execute("DROP TRIGGER IF EXISTS set_user_id_trigger ON neondb.user;")
    op.execute("DROP FUNCTION IF EXISTS neondb.set_user_id();")

    # ### commands auto generated by Alembic - please adjust! ###
    # Conditionally drop the 'exercise_entry' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'exercise_entry'
            ) THEN
                DROP TABLE neondb.exercise_entry;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'workout_plan' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'workout_plan'
            ) THEN
                DROP TABLE neondb.workout_plan;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'workout_log' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'workout_log'
            ) THEN
                DROP TABLE neondb.workout_log;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'weight_entry' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'weight_entry'
            ) THEN
                DROP TABLE neondb.weight_entry;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'membership' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'membership'
            ) THEN
                DROP TABLE neondb.membership;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'measurement_log' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'measurement_log'
            ) THEN
                DROP TABLE neondb.measurement_log;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'diet_log' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'diet_log'
            ) THEN
                DROP TABLE neondb.diet_log;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'achievement' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'achievement'
            ) THEN
                DROP TABLE neondb.achievement;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'user' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'user'
            ) THEN
                DROP TABLE neondb.user;
            END IF;
        END $$;
    """)

    # Conditionally drop the index 'ix_neondb_clients_api_key' if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_indexes 
                WHERE schemaname = 'neondb' AND indexname = 'ix_neondb_clients_api_key'
            ) THEN
                DROP INDEX neondb.ix_neondb_clients_api_key;
            END IF;
        END $$;
    """)

    # Conditionally drop the 'clients' table if it exists
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT FROM pg_tables 
                WHERE schemaname = 'neondb' AND tablename = 'clients'
            ) THEN
                DROP TABLE neondb.clients;
            END IF;
        END $$;
    """)
    # ### end Alembic commands ###
